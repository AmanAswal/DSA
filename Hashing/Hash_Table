class Hash_Table:
    def __init__(self):
        self.Max = 100
        self.arr = [None for i in range(self.Max)]

    def hash_talbe(self, key):
        h = 0
        for char in key:
            h += ord(char)
        return h % 100

    def add(self, key, val):
        h = self.hash_talbe(key)
        self.arr[h] = val

    def get_value(self, key):
        h = self.hash_talbe(key)
        return self.arr[h]


tab = Hash_Table()



// with collision

class Hash_Table:
    def __init__(self):
        self.Max = 100
        self.arr = [[] for i in range(self.Max)]

    def hash_talbe(self, key):
        h = 0
        for char in key:
            h += ord(char)
        return h % 100

    def __setitem__(self, key, value):
        h = self.hash_talbe(key)
        found = False
        for idx, content in enumerate(self.arr[h]):
            if len(content) == 2 and content[0] == key:
                self.arr[h][idx] = (key, value)
        if not found:
            self.arr[h] = (key, value)

    def __getitem__(self, key, val):
        h = self.hash_talbe(key)
        return self.arr[h]

    def __delitem__(self, key):
        h = self.hash_talbe(key)
        self.arr[h] = None


tab = Hash_Table()
tab.__setitem__("content 1", 34)
tab.__setitem__("content 1", 34)
tab.__setitem__("content 2", 3477)
tab.__setitem__("content 3", 3334)
print(tab.arr)
