class Node:
    def __init__(self, Data):
        self.Data = Data
        self.next = None
        self.prev = None


class DoubleLinkedList:
    def __init__(self):
        self.head = None

    def appends(self, data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            new_node = Node(data)
            cur = self.head
            while cur.next:
                cur = cur.next
            cur.next = new_node
            new_node.prev = cur
            new_node.next = None

    def preAppend(self, data):
        if self.head is None:
            new_node = Node(data)
            new_node.prev = None
            new_node.next = None
            self.head = new_node
        else:
            new_node = Node(data)
            cur = self.head
            cur.prev = new_node
            new_node.next = cur
            new_node.prev = None
            self.head = new_node

    def after_Node(self, data, key):
        # if self.head is None:
        #     new_node = Node(data)
        #     self.head = new_node
        #     return self.head
        cur = self.head
        while cur:
            if cur.next is None and cur.Data == key:
                self.appends(data)
                return
            elif key == cur.Data:
                new_node = Node(data)
                nxt = cur.next
                cur.next = new_node
                nxt.prev = new_node
                new_node.next = nxt
                new_node.prev = cur
            cur = cur.next

    def before_Append(self, data, key):
        cur = self.head
        if cur.prev is None and cur.Data == key:
            self.preAppend(data)
            return
        while cur:
            if cur.Data == key:
                new_node = Node(data)
                peeve = cur.prev
                peeve.next = new_node
                new_node.prev = peeve
                new_node.next = cur
                cur.prev = new_node
            cur = cur.next



    def print(self):
        cur = self.head
        while cur:
            print(cur.Data)
            cur = cur.next


double = DoubleLinkedList()
de(6, 1)
double.print()
